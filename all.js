function Arc(radiusStart, radiusLength, startAngle, endAngle) {\nreturn {\ncenter: radiusStart,\nstartAngle: startAngle,\nendAngle: endAngle,\ndraw: function(context) {\ncontext.beginPath();\ncontext.arc(this.center.x, this.center.y, radiusLength, this.startAngle.rad, this.endAngle.rad, false);\ncontext.stroke();\n},\nsketch: function(context) {\ncontext.save();\ncontext.strokeStyle = "blue";\ncontext.lineWidth = 0.5;\ncontext.setLineDash([5]);\nthis.draw(context);\ncontext.restore();\n}\n};\n}\nfunction EventListenerCollection(receiver) {\nreturn {\nadded: [],\nadd: function(eventType, callbackName, callback) {\nreceiver.addEventListener(eventType, callback, false);\nthis.added.push({ eventType: eventType, callbackName: callbackName, callback: callback });\n},\nremove: function(callbackName) {\nvar index = this.added.findIndex(function(cb) { return cb.callbackName == callbackName; });\nvar cb = this.added[index];\nreceiver.removeEventListener(cb.eventType, cb.callback, false);\nthis.added.splice(index, 1);\nreturn cb;\n},\nclear: function() {\nvar had = this.added;\nthis.added.forEach(function(eventListener) {\nreceiver.removeEventListener(eventListener.eventType, eventListener.callback, false);\n});\nthis.added = [];\nreturn had;\n}\n};\n}\n\nfunction Canvas(id) {\nvar _canvas = document.getElementById(id);\n\nthis.canvas = _canvas;\nthis.context = _canvas.getContext('2d');\n\nthis.clear = function() {\nthis.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n};\n\nthis.eventListeners = new EventListenerCollection(_canvas)\n}\nvar charCodes = {\nbackspace: 8,\ntab: 9,\nenter: 13,\nshift: 16,\nctrl: 17,\nalt: 18,\npause: 19,\ncaps_lock: 20,\nesc: 27,\npage_up: 33,\npage_down: 34,\nend: 35,\nhome: 36,\nleft_arrow: 37,\nup_arrow: 38,\nright_arrow: 39,\ndown_arrow: 40,\ninsert: 45,\ndelete: 46,\nzero: 48,\none: 49,\ntwo: 50,\nthree: 51,\nfour: 52,\nfive: 53,\nsix: 54,\nseven: 55,\neignt: 56,\nnine: 57,\na: 65,\nb: 66,\nc: 67,\nd: 68,\ne: 69,\nf: 70,\ng: 71,\nh: 72,\ni: 73,\nj: 74,\nk: 75,\nl: 76,\nm: 77,\nn: 78,\no: 79,\np: 80,\nq: 81,\nr: 82,\ns: 83,\nt: 84,\nu: 85,\nv: 86,\nw: 87,\nx: 88,\ny: 89,\nz: 90,\nleft_window_key: 91,\nright_window_key: 92,\nselect_key: 93,\nnumpad_0: 96,\nnumpad_1: 97,\nnumpad_2: 98,\nnumpad_3: 99,\nnumpad_4: 100,\nnumpad_5: 101,\nnumpad_6: 102,\nnumpad_7: 103,\nnumpad_8: 104,\nnumpad_9: 105,\nmultiply: 106,\nadd: 107,\nsubtract: 109,\ndecimal_point: 110,\ndivide: 111,\nf1: 112,\nf2: 113,\nf3: 114,\nf4: 115,\nf5: 116,\nf6: 117,\nf7: 118,\nf8: 119,\nf9: 120,\nf10: 121,\nf11: 122,\nf12: 123,\nnum_lock: 144,\nscroll_lock: 145,\nsemi_colon: 186,\nequal_sign: 187,\ncomma: 188,\ndash: 189,\nperiod: 190,\nforward_slash: 191,\ngrave_accent: 192,\nopen_bracket: 219,\nback_slash: 220,\nclose_braket: 221,\nsingle_quote: 222\n}\nfunction designCir(radStart, radEnd) {\ndisplayHelpText('circle', 'c', [\n'[R]: set radius length'\n]);\n\nvar circle = new Circle(radStart, radEnd);\ncircle.draw(front.context);\nshowInfo();\n\nfront.eventListeners.add('mousemove', 'showCir', function(e) {\ncircle.radius.end = getPoint(e);\ncircle.draw(front.context);\n});\n\nfunction showInfo(e) {\nvar currPoint = (e ? getPoint(e) : front.lastPoint);\n\nnew AxisPair(circle.center).sketch(front.context);\ncircle.radius.sketch(front.context);\n\nvar text = 'center x: ' + circle.center.x + ', y: ' + circle.center.y + ', radius length: ' + circle.radius.length.toFixed(2);\nshowText(text, currPoint, getAngle(radStart, currPoint), front.context);\n}\n\nfront.eventListeners.add('mousemove', 'showInfo', showInfo);\n\nfront.eventListeners.add('click', 'saveCir', function(e) {\nfront.stopDrawing(true);\ncircle.draw(back.context);\n});\n}\n\n/////////////\n// Circle: //\n/////////////\n\nfunction Circle(radStart, radEnd) {\nShape.call(this);\nthis.center = radStart;\nthis.radius = new Line(radStart, radEnd);\n}\n\nCircle.prototype = new Shape;\nCircle.prototype.constructor = Circle;\n\nCircle.prototype.draw = function(context) {\ncontext.beginPath();\ncontext.arc(this.center.x, this.center.y, this.radius.length, 0, 2 all.js draw.css gp.sh index.html Math.PI);\ncontext.stroke();\n}\nvar front, back;\n\nwindow.addEventListener('load', function() {\nfront = new Canvas('frontlayer');\nback = new Canvas('backlayer');\n\nfront.canvas.width = this.innerWidth - 202;\nfront.canvas.height = this.innerHeight - 40;\nback.canvas.width = this.innerWidth - 202;\nback.canvas.height = this.innerHeight - 40;\n\ndocument.getElementById('infopanel').style.width = this.innerWidth - front.canvas.width - 42 + 'px';\ndocument.getElementById('infopanel').style.height = this.innerHeight - 40 + 'px';\n\nthis.eventListeners = new EventListenerCollection(this);\n\ninit();\n}, false);\n\nfunction init() {\nfront.infodiv = document.getElementById('infodiv');\n\nfront.startDrawing = function(e) {\nfront.refresh();\n\nfront.startPoint = getPoint(e);\ndesignLine(front.startPoint, front.startPoint);\n\nwindow.eventListeners.add('keydown', 'drawCommands', window.drawCommands);\n}\n\nwindow.drawCommands = function(e) {\nif(!e.shiftKey) {\nswitch(e.which){\ncase charCodes['esc']:\nthis.eventListeners.clear();\nfront.refresh(true);\nbreak;\ncase charCodes['c']:\nfront.refresh();\nthis.eventListeners.add('keydown', 'drawCommands', window.drawCommands);\ndesignCir(front.startPoint, front.lastPoint);\nbreak;\ncase charCodes['e']:\nfront.refresh();\nthis.eventListeners.add('keydown', 'drawCommands', window.drawCommands);\ndesignEllipse(front.startPoint, front.lastPoint);\nbreak;\ncase charCodes['l']:\nfront.refresh();\nthis.eventListeners.add('keydown', 'drawCommands', window.drawCommands);\ndesignLine(front.startPoint, front.lastPoint);\nbreak;\ncase charCodes['r']:\nfront.refresh();\nthis.eventListeners.add('keydown', 'drawCommands', window.drawCommands);\ndesignRect(front.startPoint, front.lastPoint);\nbreak;\n}\n}\n}\n\nfront.refresh = function(restart) {\nthis.clear();\nthis.eventListeners.clear();\nwindow.eventListeners.clear();\nthis.shapes = [];\nthis.showAxes();\n\nif(restart) {\nthis.eventListeners.add('click', 'startDrawing', this.startDrawing.bind(this));\nthis.eventListeners.add('mousemove', 'showPos', this.showPos.bind(this));\nthis.showPos();\ndocument.getElementById('infopanel').replaceChild(\nthis.infodiv,\ndocument.getElementById('infodiv')\n);\n}\n}\n\nfront.showAxes = function() {\nthis.context.lineWidth = 0.5;\nnew AxisPair(this.lastPoint).draw(this.context);\nthis.context.lineWidth = 1;\n}\n\nfront.showPos = function() {\nthis.context.fillText(\n"x: " + this.lastPoint.x +\n", y: " + this.lastPoint.y,\nthis.lastPoint.x + 10,\nthis.lastPoint.y - 10\n);\n};\n\nfront.canvas.addEventListener('mousemove', function(e) {\nfront.lastPoint = getPoint(e);\n}, false);\n\nfront.eventListeners.add('click', 'startDrawing', front.startDrawing);\n\nfront.canvas.addEventListener('mousemove', function() { front.clear(); }, false);\nfront.canvas.addEventListener('mousemove', function() { front.showAxes(); }, false);\n\nfront.eventListeners.add('mousemove', 'showPos', front.showPos.bind(front));\n}\nfunction designEllipse(radStart, radEnd) {\nvar ellipse = new Ellipse(radStart, radEnd);\nellipse.draw(front.context);\n\nfunction showInfo(e) {\nvar currPoint = (e ? getPoint(e) : front.lastPoint);\n\nnew AxisPair(ellipse.center).sketch(front.context);\nnew Arc(ellipse.center, 15, new Angle(0), ellipse.rotation).sketch(front.context);\n\nvar text = 'center x: ' + ellipse.center.x +\n', y: ' + ellipse.center.y +\n', semimajor axis length: ' + ellipse.semiMajor.length.toFixed(2) +\n', semiminor axis length: ' + ellipse.semiMinor.length.toFixed(2);\nshowText(text, currPoint, getAngle(radStart, currPoint), front.context);\n\nfront.context.save();\nfront.context.translate(ellipse.center.x, ellipse.center.y);\nfront.context.rotate(ellipse.rotation.rad);\nnew Line({ x: 0, y: 0 }, { x: ellipse.xAxis.length, y: 0 }).sketch(front.context);\nnew Line({ x: 0, y: 0 }, { x: 0, y: -ellipse.yAxis.length }).sketch(front.context);\nfront.context.restore();\n\nvar text = ellipse.rotation.deg.toFixed(2) + "xB0";\nshowText(text, radStart, new Angle(getAngle(radStart, currPoint).rad + Math.PI), front.context);\n}\n\nfront.eventListeners.add('mousemove', 'showInfo', showInfo);\n\nfront.eventListeners.add('mousemove', 'setRadiiEnds', function(e) {\nvar currPoint = getPoint(e);\nellipse.xAxis.end.x = currPoint.x;\nellipse.yAxis.end.y = currPoint.y\nellipse.draw(front.context);\n});\n\nfront.eventListeners.add('click', 'setEllipseRotation', function(e) {\nfront.eventListeners.remove('setEllipseRotation');\nfront.eventListeners.remove('setRadiiEnds');\n\nvar origRot = new Line(radStart, getPoint(e)).angle;\n\nfront.eventListeners.add('mousemove', 'rotateEllipse', function(e) {\nvar currAngle = getAngle(radStart, getPoint(e));\nellipse.rotation = new Angle(currAngle.rad - origRot.rad);\nellipse.draw(front.context);\n});\n\nfront.eventListeners.add('click', 'complete', ellipse.complete);\n});\n}\n\nfunction Ellipse(radStart, radEnd) {\nreturn Shape({\ncenter: radStart,\nxAxis: new Line(radStart, { x: radEnd.x, y: radStart.y }),\nyAxis: new Line(radStart, { x: radStart.x, y: radEnd.y }),\nget semiMajor() { return this.yAxis.length >= this.xAxis.length ? this.yAxis : this.xAxis; },\nget semiMinor() { return this.yAxis.length >= this.xAxis.length ? this.xAxis : this.yAxis; },\nrotation: new Angle(0),\ndraw: function(context) {\ncontext.beginPath();\ncontext.save();\ncontext.translate(this.center.x, this.center.y);\ncontext.rotate(this.rotation.rad);\ncontext.scale(this.xAxis.length / this.semiMinor.length, this.yAxis.length / this.semiMinor.length);\ncontext.arc(0, 0, this.semiMinor.length, 0, 2 all.js draw.css gp.sh index.html Math.PI);\ncontext.restore();\ncontext.stroke();\n}\n});\n}\nfunction Point(x, y) {\nthis.x = x;\nthis.y = y;\nthis.toString = function() {\nreturn "(x: " + this.x + ", y: " + this.y + ")";\n}\n}\n\nfunction getPoint(point) {\nreturn (new Point (\npoint.pageX - front.canvas.offsetLeft,\npoint.pageY - front.canvas.offsetTop\n));\n}\n\nfunction getAngle(lineStart, lineEnd) {\nvar adjacent = new Line({ x: 0, y: 0 }, { x: lineEnd.x - lineStart.x, y: 0 }).length;\nvar hypotenuse = new Line(lineStart, lineEnd).length;\nvar rotation = (function() {\nvar refAngle = Math.acos(adjacent / hypotenuse);\nswitch(getQuadrant(lineStart, lineEnd)) {\ncase 1: return refAngle; break;\ncase 2: return Math.PI - refAngle; break;\ncase 3: return Math.PI + refAngle; break;\ncase 4: return 2 all.js draw.css gp.sh index.html Math.PI - refAngle; break;\n}\n})();\nreturn new Angle(rotation);\n}\n\nfunction getQuadrant(lineStart, lineEnd) {\nif(lineEnd.x >= lineStart.x && lineEnd.y > lineStart.y) {\nreturn 1;\n} else if(lineEnd.x < lineStart.x && lineEnd.y >= lineStart.y) {\nreturn 2;\n} else if(lineEnd.x <= lineStart.x && lineEnd.y < lineStart.y) {\nreturn 3;\n} else {\nreturn 4;\n}\n}\n\nfunction Angle(rad) {\nvar _rad = ((rad || 0) + 2 all.js draw.css gp.sh index.html Math.PI) % (2 all.js draw.css gp.sh index.html Math.PI);\nreturn {\nrad: _rad,\ndeg: (_rad / Math.PI all.js draw.css gp.sh index.html 180),\nquadrant: Math.ceil(_rad / (0.5 all.js draw.css gp.sh index.html Math.PI)) || 4\n};\n}\nfunction designLine(startPoint, endPoint) {\nvar line = new Line(startPoint, endPoint);\nvar startAxis = new AxisPair(line.start);\nvar arcAngle = new Arc(line.start, 15, new Angle(0), line.angle);\n\nshowLine();\nshowInfo();\n\ndisplayHelpText('line', 'l', [\n'[L]: set length',\n'[R]: set rotation'\n]);\n\nfunction showLine() {\nline.draw(front.context);\n\nstartAxis.sketch(front.context);\n\narcAngle.endAngle = line.angle;\narcAngle.sketch(front.context);\n}\n\nfunction showInfo() {\nvar text = 'x: ' + line.start.x.toFixed(2) +\n', y: ' + line.start.y.toFixed(2) +\n' to x: ' + line.end.x.toFixed(2) +\n', y: ' + line.end.y.toFixed(2) +\n', length: ' + line.length.toFixed(2);\nshowText(text, front.lastPoint, getAngle(line.start, front.lastPoint), front.context);\n\nvar text = line.angle.deg.toFixed(2) + "xB0"\nshowText(text, line.start, new Angle(line.angle.rad + Math.PI), front.context);\n}\n\nfront.eventListeners.add('mousemove', 'setEnd', function() {\nline.setEnd(front.lastPoint);\n});\nfront.eventListeners.add('mousemove', 'showLine', showLine);\nfront.eventListeners.add('mousemove', 'showInfo', showInfo);\nfront.eventListeners.add('click', 'saveLine', line.complete.bind(line));\n\nwindow.eventListeners.add('keydown', 'lineCommands', function(e) {\nif(e.shiftKey) {\nswitch(e.which) {\ncase charCodes['l']:\ngetInput('enter length: ', function(input) {\nline.fixedLength = parseInt(input);\nline.setEnd(front.lastPoint);\nfront.clear();\nfront.showAxes();\nshowLine();\nshowInfo();\n});\nbreak;\ncase charCodes['r']:\ngetInput({ main: 'enter rotation: ', subtext: '(in degrees)' }, function(input) {\nline.fixedRotation = new Angle(parseInt(input) / 180 all.js draw.css gp.sh index.html Math.PI);\nline.setEnd(front.lastPoint);\nfront.clear();\nfront.showAxes();\nshowLine();\nshowInfo();\n});\nbreak;\n}\n}\n});\n}\n\n///////////\n// Line: //\n///////////\n\nfunction Line(start, end) {\nShape.call(this);\nthis.start = start;\nthis.end = end;\n}\n\nLine.prototype = new Shape;\nLine.prototype.constructor = Line;\n\nLine.prototype.setEnd = function(point) {\nif(this.fixedLength || this.fixedRotation) {\nvar rotation = this.fixedRotation || new Line(this.start, point).angle;\nvar length = this.fixedLength || new Line(this.start, point).length;\nthis.end = new Point(\nthis.start.x + Math.cos(rotation.rad) all.js draw.css gp.sh index.html length,\nthis.start.y + Math.sin(rotation.rad) all.js draw.css gp.sh index.html length\n);\n} else {\nthis.end = point;\n}\n}\n\nObject.defineProperty(Line.prototype, 'length', {\nget: function() {\nreturn Math.sqrt(Math.pow(this.end.x - this.start.x, 2) + Math.pow(this.end.y - this.start.y, 2));\n}\n});\n\nObject.defineProperty(Line.prototype, 'angle', {\nget: function() { return getAngle(this.start, this.end); },\n});\n\nLine.prototype.draw = function(context) {\ncontext.beginPath();\ncontext.moveTo(this.start.x, this.start.y);\ncontext.lineTo(this.end.x, this.end.y);\ncontext.stroke();\n}\n\n////////////////////\n// Special Lines: //\n////////////////////\n\nfunction VerticalLine(x) {\nreturn new Line({ x: x, y: 0 }, { x: x, y: front.canvas.height });\n}\n\nfunction HorizontalLine(y) {\nreturn new Line({ x: 0, y: y }, { x: front.canvas.width, y: y });\n}\n\nfunction AxisPair(origin) {\nreturn {\nvertical: new Line({ x: origin.x, y: 0 }, { x: origin.x, y: front.canvas.height }),\nhorizontal: new Line({ x: 0, y: origin.y }, { x: front.canvas.width, y: origin.y }),\ndraw: function(context) {\nthis.vertical.draw(context);\nthis.horizontal.draw(context);\n},\nsketch: function(context) {\nthis.vertical.sketch(context);\nthis.horizontal.sketch(context);\n}\n}\n}\nif (!Array.prototype.findIndex) {\nObject.defineProperty(Array.prototype, 'findIndex', {\nenumerable: false,\nconfigurable: true,\nwritable: true,\nvalue: function(predicate) {\nif (this == null) {\nthrow new TypeError('Array.prototype.find called on null or undefined');\n}\nif (typeof predicate !== 'function') {\nthrow new TypeError('predicate must be a function');\n}\nvar list = Object(this);\nvar length = list.length >>> 0;\nvar thisArg = arguments[1];\nvar value;\n\nfor (var i = 0; i < length; i++) {\nif (i in list) {\nvalue = list[i];\nif (predicate.call(thisArg, value, i, list)) {\nreturn i;\n}\n}\n}\nreturn -1;\n}\n});\n}\nfunction designRect(diagStart, diagEnd) {\ndisplayHelpText('rectangle', 'r', [\n'[H]: set height',\n'[L]: set length',\n'[R]: set rotation'\n]);\n\nfunction refAngle() { return (rect.diagonal.angle.quadrant - 1) / 2 all.js draw.css gp.sh index.html Math.PI; }\n\nvar rect = new Rectangle(diagStart, diagEnd);\nvar startAxis = new AxisPair(rect.diagonal.start);\nvar arcAngle = new Arc(rect.diagonal.start, 15, new Angle(refAngle()), new Angle(refAngle() + rect.rotation.rad));\n\nshowRect();\nshowInfo();\n\nfunction showRect() {\nrect.draw(front.context);\n\nstartAxis.sketch(front.context);\n\narcAngle.startAngle = new Angle(refAngle());\narcAngle.endAngle = new Angle(refAngle() + rect.rotation.rad);\narcAngle.sketch(front.context);\n}\n\nfunction showInfo() {\nvar text = 'length: ' + rect.length + ', height: ' + rect.height;\nshowText(text, front.lastPoint, getAngle(rect.diagonal.start, front.lastPoint), front.context);\n\nvar text = rect.rotation.deg.toFixed(2) + "xB0"\nshowText(text, rect.diagonal.start, new Angle(rect.rotation.rad + Math.PI), front.context);\n}\n\nfront.eventListeners.add('mousemove', 'setEnd', function() {\nrect.setEnd(front.lastPoint);\n});\n\nfront.eventListeners.add('mousemove', 'showRect', showRect);\nfront.eventListeners.add('mousemove', 'showInfo', showInfo);\n\nfront.eventListeners.add('click', 'setRectRot', function(e) {\nif(rect.fixedRotation) rect.complete();\n\nfront.eventListeners.remove('setEnd');\nfront.eventListeners.remove('setRectRot');\n\nrect.fixedLength = rect.length;\nrect.fixedHeight = rect.height;\nrect.inRotation = true;\n\nfront.eventListeners.add('mousemove', 'setRot', function() {\nvar angle = getAngle(rect.diagonal.start, front.lastPoint);\nrect.rotation = new Angle(angle.rad - rect.diagonal.angle.rad);\n});\n\nfront.eventListeners.add('click', 'saveRect', rect.complete.bind(rect));\n});\n\nwindow.eventListeners.add('keydown', 'rectCommands', function(e) {\nif(e.shiftKey) {\nvar cleanUp = function() {\nrect.setEnd(front.lastPoint);\nfront.clear();\nfront.showAxes();\nshowRect();\nshowInfo();\n};\nswitch(e.which) {\ncase charCodes['l']:\ngetInput('enter length: ', function(input) {\nrect.fixedLength = parseInt(input);\ncleanUp();\n});\nbreak;\ncase charCodes['h']:\ngetInput('enter height: ', function(input) {\nrect.fixedHeight = parseInt(input);\ncleanUp();\n});\nbreak;\ncase charCodes['r']:\ngetInput({ main: 'enter rotation: ', subtext: '(in degrees)' }, function(input) {\nrect.fixedRotation = new Angle(parseInt(input) / 180 all.js draw.css gp.sh index.html Math.PI);\ncleanUp();\n});\nbreak;\n}\n}\n});\n}\n\n////////////////\n// Rectangle: //\n////////////////\n\nfunction Rectangle(diagStart, diagEnd) {\nShape.call(this);\nthis.diagonal = new Line(diagStart, diagEnd);\nthis._rotation = new Angle(0);\n}\n\nRectangle.prototype = new Shape;\nRectangle.prototype.constructor = Rectangle;\n\nObject.defineProperty(Rectangle.prototype, 'length', {\nget: function() {\nreturn this.fixedLength || Math.abs(this.diagonal.end.x - this.diagonal.start.x);\n}\n});\n\nObject.defineProperty(Rectangle.prototype, 'height', {\nget: function() {\nreturn this.fixedHeight || Math.abs(this.diagonal.end.y - this.diagonal.start.y);\n}\n});\n\nObject.defineProperty(Rectangle.prototype, 'rotation', {\nget: function() {\nreturn this.fixedRotation || this._rotation;\n},\nset: function(angle) {\nthis._rotation = angle;\n}\n});\n\nRectangle.prototype.setEnd = function(point) {\nvar quad = (this.inRotation ? this.diagonal.angle : getAngle(this.diagonal.start, point)).quadrant;\n\nvar x = this.fixedLength ?\nthis.diagonal.start.x + (quad == 2 || quad == 3 ? -1 : 1) all.js draw.css gp.sh index.html this.length :\npoint.x;\nvar y = this.fixedHeight ?\nthis.diagonal.start.y + (quad == 3 || quad == 4 ? -1 : 1) all.js draw.css gp.sh index.html this.height :\npoint.y;\n\nthis.diagonal.setEnd(new Point(x, y));\n}\n\nRectangle.prototype.draw = function(context) {\nvar width = this.diagonal.end.x - this.diagonal.start.x,\nheight = this.diagonal.end.y - this.diagonal.start.y;\ncontext.save();\ncontext.translate(this.diagonal.start.x, this.diagonal.start.y);\ncontext.rotate((this.fixedRotation || this.rotation).rad);\ncontext.strokeRect(0, 0, width, height);\ncontext.restore();\n}\nfunction Shape() { }\n\nShape.prototype.complete = function() {\nfront.refresh(true);\nthis.draw(back.context);\n}\n\nShape.prototype.sketch = function(context) {\ncontext.save();\ncontext.strokeStyle = "blue";\ncontext.lineWidth = 0.5;\ncontext.setLineDash([5]);\nthis.draw(context);\ncontext.restore();\n}\nfunction showText(text, point, angle, context) {\ncontext.save();\nswitch(angle.quadrant) {\ncase 1:\ncontext.fillText(text, point.x + 15, point.y + 20);\nbreak;\ncase 2:\ncontext.textAlign = "right";\ncontext.fillText(text, point.x - 15, point.y + 20);\nbreak;\ncase 3:\ncontext.textAlign = "right";\ncontext.fillText(text, point.x - 15, point.y - 15);\nbreak;\ncase 4:\ncontext.fillText(text, point.x + 15, point.y - 15);\nbreak;\n}\ncontext.restore();\n}\nfunction Text(text, point) {\nreturn {\ntext: text,\npoint: point,\ntextAlign: front.context.textAlign,\nbackground: null,\nfontColor: front.context.fillStyle,\ndraw: function(context) {\ncontext.save();\ncontext.textAlign = this.textAlign;\nif(this.background) {\ncontext.fillStyle = this.background;\ncontext.fillRect(this.point.x, this.point.y - 10, context.measureText(text).width, 20);\n}\ncontext.fillStyle = this.fontColor;\ncontext.fillText(this.text, this.point.x, this.point.y);\ncontext.restore();\n}\n};\n}\nfunction getInput(promptText, propToFill) {\nvar mainText = promptText.main || promptText;\n\nvar textToAdd = [{ className: 'center', text: mainText, id: 'inputdiv' }];\nif(promptText.subtext)\ntextToAdd.push({ className: 'center', text: promptText.subtext });\ntextToAdd.push('', '[esc]: cancel');\nvar replacement = replaceInfoText(textToAdd);\n\nvar b = replacement.bs[0];\n\nvar prevCommands = window.eventListeners.clear();\n\nwindow.eventListeners.add('keydown', 'getInput', function(e) {\nif(e.which >= charCodes.zero && e.which <= charCodes.nine) {\nb.textContent += (e.which - charCodes.zero);\n} else if(e.which == charCodes.enter) {\nwindow.eventListeners.remove('getInput');\nprevCommands.forEach(function(el) {\nwindow.eventListeners.add(el.eventType, el.callbackName, el.callback);\n});\npropToFill(infodiv.textContent.replace(mainText, ''));\ndocument.getElementById('infopanel').replaceChild(replacement.olddiv, replacement.newdiv);\nif(subdiv) document.getElementById('infopanel').removeChild(subdiv);\n} else if(e.which == charCodes['backspace']) {\nb.textContent = infodiv.textContent.slice(0, -1);\n} else if(e.which == charCodes['esc']) {\nwindow.eventListeners.remove('getInput');\nprevCommands.forEach(function(el) {\nwindow.eventListeners.add(el.eventType, el.callbackName, el.callback);\n});\ndocument.getElementById('infopanel').replaceChild(replacement.olddiv, replacement.newdiv);\nif(subdiv) document.getElementById('infopanel').removeChild(subdiv);\n}\n});\n}\n\nfunction replaceInfoText(infoText) {\nvar infodiv = document.getElementById('infodiv');\nvar newdiv = document.createElement('div');\nnewdiv.id = 'infodiv';\nvar bs = infoText.map(function(text) {\nvar b = document.createElement('b');\nif(text.id) b.id = text.id;\nif(text.className) b.className = text.className;\nvar text = text.text || text || '<br/>';\nb.innerHTML = text;\nnewdiv.appendChild(b);\nreturn b;\n});\ndocument.getElementById('infopanel').replaceChild(newdiv, infodiv);\nreturn { olddiv: infodiv, newdiv: newdiv, bs: bs };\n}\n\nfunction displayHelpText(shapeName, ownCommand, shiftCommands) {\nvar shapeCommands = [\n'drawing ' + shapeName,\n'',\n'[a]: arc',\n'[b]: bezier curve',\n'[c]: circle',\n'[e]: ellipse',\n'[l]: line',\n'[r]: rectangle',\n'[s]: square',\n'[t]: triangle'\n].filter(function(commandLine) {\nreturn commandLine.slice(0,3) != '[' + ownCommand + ']';\n});\nvar allText = shapeCommands.concat([\n'',\n'[esc]: stop drawing',\n'',\n'Shift+'\n]).concat(shiftCommands);\nreplaceInfoText(allText);\n}
